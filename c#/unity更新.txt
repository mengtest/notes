打包脚本（UnityEditor）：
BuildPipeline.BuildAssetBundles("Assets/AssetBundles",BuildAssetBundleOptions.None,BuildTarget.xx); //推荐使用ChunkBasedCompression 压
缩选项
1.不同的平台单独打包，BuildTarget参数指定平台和打包策略，如果不指定，默认的webplayer
2.生成包文件和与之对应的 .manifest清单文件。还有一个总的AssetBundle

AssetBundle实现的机制是只会在内存中寻找其依赖资源所在的AssetBundle，并自动从中加载出所需的资源，所以要保证主体在加载时被依赖资源所在AssetBundle依然处于开启状态就可以正常加载资源了（即保证内存中有其依赖资源）

Resources文件夹里的资源越多，程序的启动画面时间就越长，推荐采用AssetBundle进行资源的动态加载

www.assetBundle.Unload(false);
1.为true不仅内存中的AssetBundle对象包含的资源会被销毁。根据这些资源实例化而来的游戏内的对象也会销毁。
2.为false，则仅仅销毁内存中的AssetBundle对象包含的资源。

AssetBundle.mainAsset
AssetBundle.LoadAsset

string mUrl = Cdn + "AssetBundle";
public static WWW LoadFromCacheOrDownload(string url, Hash128 hash);
然而hash就是需要借助AssetBundleManifest.GetAssetBundleHash的方法来获取了.
AssetBundle.LoadAsset("AssetBundleManifest")，就可以把那个没有后缀名的文件转成AssetBundleManifest对象mainfest。

类 AssetBundle ：
LoadFromFile(string path, uint crc = 0)：分同步和异步方式，同LoadFromCacheOrDownload解压到外部硬盘
LoadFromMemory(byte[] binary, uint crc = 0)：一般用在经过加密的数据上，经过加密的流数据经过解密之后我们可以调用该方法动态的创建AssetBundle对象

AssetBundle 是一种使用LZMA压缩方式(默认的，还有LZ4)压缩的资源文件，使用LZMA格式压缩的AssetBundle的包体积最小（高压缩比），但是相应的会增加解压缩时的时间。
生成一个.manifest文件，这个文件描述了assetbundle包大小、crc验证、包之间的依赖关系等等

AssetBundle的名字固定为小写(如cfg.ab)，Variant，其实就是一个后缀，有不同分辨率的同名资源，可以使用这个来做区分。设置后修改资源对应的.meta文件，可以查看

导出AssetBundle和自动设置名称：
每一个小的资源都会有一个唯一的哈希Id的，是一串很长的字母和数字组合。我们可以通过AssetDatabase.AssetPathToGUID来获得这个ID。.meta文件 guid字段

