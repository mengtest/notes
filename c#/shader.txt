Mesh :网格组件。用于设置物体外表形状。(.fbx)
Mesh Filter组件（设置物体的mesh,即.fbx）:网格过滤器。就是为游戏对象添加一个外形。(在使用的时候必须同时提供一个Mesh Renderer组件，因为需要将其渲染出来，否则你不见他。)
如果获取的网格拥有蒙皮信息（有蒙皮的.fbx）,Unity将自动创建一个skinned Mesh Renderer。
Mesh Renderer :网格渲染器。用于渲染网格显示游戏对象(这里设置物体的Materials 和 shader 方式)

Materials 材质球定义了: 用于渲染的纹理，用于渲染的颜色，其它资源，例如一个着色器渲染所必需的立方体贴图

内置着色器:
                                                        Bumped凸起的        Parallax Bumped视差凸起 
      (VertexLit顶点光亮  diffuse漫反射  glossy光滑) (diffuse  specular镜面) (diffuse specular)
normal不透明纹理对象（纹理无alpha通道）
transparent部分透明的对象（纹理带alpha通道）
transparentCutout 拥有完全不透明和完全透明的区域的对象，比如栅栏（一个携带alpha通道用于控制透明的基础纹理）
Self-Illuminated自身发光（一个材质纹理，没有alpha通道，一个自发光纹理，带用于自发光贴图的alpha通道）
reflective 反射（一个基本纹理，带用于定义反射区域的alpha通道，一个用于反射贴图的反射Cubemap）

按照渲染管线的分类，可以把Sharder分成3个类别：
1.surface shaders, 表面着色器
2.vertex and fragment shaders and 顶点和片段着色器
顶点着色器
顶点着色程序从GPU前端（寄存器）中提取图元信息(顶点位置、法向量、纹理坐标)，并完成顶点坐标空间变换、法向量空间转换、光照计算等操作，最后将计算数据传送到指定寄存器中。

片段着色器
片段程序从上述寄存器中获取需要的数据：纹理坐标与光照信息等，并根据这些信息以及从应用程序传递的纹理信息进行每个片段的颜色计算（纹理查询），最后将处理后的数据传送光栅操作模块。
3.fixed function shaders. 固定功能着色器