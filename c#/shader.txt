UV mapping的作用是将一个2D贴图上的点按照一定规则映射到3D模型上，是3D渲染中最常见的一种顶点处理手段

Mesh :网格组件。用于设置物体外表形状。(.fbx)
Mesh Filter组件（设置物体的mesh,即.fbx）:网格过滤器。就是为游戏对象添加一个外形。(在使用的时候必须同时提供一个Mesh Renderer组件，因为需要将其渲染出来，否则你不见他。)
如果获取的网格拥有蒙皮信息（有蒙皮的.fbx）,Unity将自动创建一个skinned Mesh Renderer。
Mesh Renderer :网格渲染器。用于渲染网格显示游戏对象(这里设置物体的Materials 和 shader 方式)
Materials 材质球定义了: 用于渲染的纹理，用于渲染的颜色，其它资源，例如一个着色器渲染所必需的立方体贴图
Material(类型包括：2d物理材质，3d物理材质，用于着色的材质)
Shader: 是一段规定好输入（颜色，贴图等）和输出（渲染器能够读懂的点和颜色的对应关系）的程序

## Material指定一个Shader,Shader设置贴图和颜色等信息，Mesh Renderer负责渲染

Shader就是材质模版。 Material就是一个材质实例。 每一个Material你可以认为是一个材质实例的序列化存储

<Renderer>().material 和 <Renderer>().sharedMaterial（不推荐使用sharedMaterial，建议使用material。）
1.对于material，每一次引用就会生成一个新的material到内存中。多个物体的相同材质间不会影响，但是会内存泄漏，可以通过Resources.UnloadUnusedAssets释放。但是在引用后并不会改变我们项目工程中材质球的原始属性设置。 
2.而对于sharedMaterial，所有使用这个材质球物体都会被改变，并且改变后的设置将会改变我们项目工程中材质球的原始属性设置
3.如果我们先改变了material，表示生成了一个新的material在内存中，此时再使用sharedMaterial对新的material并不起作用。

内置着色器:
                                                        Bumped凸起的        Parallax Bumped视差凸起 
      (VertexLit顶点光亮  diffuse漫反射  glossy光滑) (diffuse  specular镜面) (diffuse specular)
normal不透明纹理对象（纹理无alpha通道）
transparent部分透明的对象（纹理带alpha通道）
transparentCutout 拥有完全不透明和完全透明的区域的对象，比如栅栏（一个携带alpha通道用于控制透明的基础纹理）
Self-Illuminated自身发光（一个材质纹理，没有alpha通道，一个自发光纹理，带用于自发光贴图的alpha通道）
reflective 反射（一个基本纹理，带用于定义反射区域的alpha通道，一个用于反射贴图的反射Cubemap）

按照渲染管线的分类，可以把Sharder分成3个类别：
1.surface shaders, 表面着色器
2.vertex and fragment shaders and 顶点和片段着色器
顶点着色器
顶点着色程序从GPU前端（寄存器）中提取图元信息(顶点位置、法向量、纹理坐标)，并完成顶点坐标空间变换、法向量空间转换、光照计算等操作，最后将计算数据传送到指定寄存器中。

片段着色器
片段程序从上述寄存器中获取需要的数据：纹理坐标与光照信息等，并根据这些信息以及从应用程序传递的纹理信息进行每个片段的颜色计算（纹理查询），最后将处理后的数据传送块。
3.fixed function shaders. 固定功能着色器


Rendering Mode: (材质要有对应的资源文件，拉图片文件到物体inspector窗口，会自动在所在文件夹同级目录下生成Materials文件夹里创建同名材质球，并替换原物体材质球)
渲染模式    意思    适用对象举例      说明
Opaque      不透明    石头         适用于所有的不透明的物体
Cutout    镂空(皮下空的)  破布         透明度不是0%就是100%，不存在半透明的区域。
Fade        隐现     物体隐去      与下面Transparent的区别为高光反射会随着透明度而消失。
Transparent 透明       玻璃        适用于像彩色玻璃一样的半透明物体，高光反射不会随透明而消失。



shader = property(属性,即输入) + subshader(包含一个或者多个的Pass(多次提交材质并绘制)。平台先选择最优先可以使用的着色器，然后依次运行其中的Pass，然后得到输出的结果) + fallback(回滚，用来处理所有Subshader都不能运行的情况)
Shader "Custom/surfaceShader1" {
	Properties {
		_Color ("Color", Color) = (1,1,1,1)  
		_MainTex ("Albedo (RGB)", 2D) = "white" {}
		_Glossiness ("Smoothness", Range(0,1)) = 0.5
		_Metallic ("Metallic", Range(0,1)) = 0.0
	}
	SubShader {
		Tags { "RenderType"="Opaque" }
		LOD 200
		
		CGPROGRAM
		// Physically based Standard lighting model, and enable shadows on all light types
		#pragma surface surf Standard fullforwardshadows

		// Use shader model 3.0 target, to get nicer looking lighting
		#pragma target 3.0

		sampler2D _MainTex;

		struct Input {
			float2 uv_MainTex;
		};

		half _Glossiness;
		half _Metallic;
		fixed4 _Color;

		void surf (Input IN, inout SurfaceOutputStandard o) {
			// Albedo comes from a texture tinted by color
			fixed4 c = tex2D (_MainTex, IN.uv_MainTex) * _Color;
			o.Albedo = c.rgb;
			// Metallic and smoothness come from slider variables
			o.Metallic = _Metallic;
			o.Smoothness = _Glossiness;
			o.Alpha = c.a;
		}
		ENDCG
	}
	FallBack "Diffuse"
}

属性定义模版： _Name("Display Name", type) = defaultValue[{options}]
1._Name 属性的名字，变量名，在之后整个Shader代码中将使用这个名字来获取该属性的内容
2.Display Name 字符串将显示在Unity的材质（指定该shader）可视编辑器中作为可读的内容来编辑该变量
3.type：
	1.Color - 一种颜色，由RGBA（红绿蓝和透明度）四个量来定义；//(1,1,1,1)
	2.2D - 一张2的阶数大小的贴图。这张贴图将在采样后被转为对应基于模型UV的每个像素的颜色，最终被显示出来；
	3.Rect - 一个非2阶数大小的贴图；
	4.Cube - （立方体纹理），简单说就是6张有联系的2D贴图的组合，主要用来做反射效果（比如天空盒和动态反射）
	5.Range(min, max) - 一个介于最小值和最大值之间的浮点数
	6.Float - 任意一个浮点数；
	7.Vector - 一个四维数 //(x,y,z,w)
2D/Rect/Cube - 对于贴图来说，默认值可以为一个代表默认tint颜色的字符串，可以是空字符串或者"white","black","gray","bump"中的一个 {option}:当我们需要打开特定选项时可以把其写在这对花括号内

Tags: 指定了这个SubShader的渲染顺序
  1。”Queue”标签。定义渲染顺序
shader渲染队列:Background(1000),Geometry(几何2000),AlphaTest(2450),Transparent(3000),Overlay(4000)最后渲染所以在最上面
Tags { "Queue"="Geometry-20" }	
ZWrite Off
  2.RenderType”标签。Unity可以运行时替换符合特定RenderType的所有Shader，Camera.RenderWithShader或者  Camera.SetReplacementShader配合使用(用处：把物体渲染成红绿热成像模式等)
  （1）”Opaque”：绝大部分不透明的物体都使用这个； 
  （2）”Transparent”：绝大部分透明的物体、包括粒子特效都使用这个； 
  （3）”Background”：天空盒都使用这个； 
  （4）”Overlay”：GUI、镜头光晕都使用这个；	
  3.”ForceNoShadowCasting”，值为”true”时，表示不接受阴影。
  4.”IgnoreProjector”，值为”true”时，表示不接受Projector组件的投影。 


LOD：Level of Detail的缩写,这个数值决定了我们能用什么样的Shade,在Unity的Quality Settings中我们可以设定允许的最大LOD，当     设定的LOD小于SubShader所指定的LOD时，这个SubShader将不可用。
  VertexLit及其系列 = 100
  Decal, Reflective VertexLit = 150
  Diffuse = 200
  Diffuse Detail, Reflective Bumped Unlit, Reflective Bumped VertexLit = 250
  Bumped, Specular = 300
  Bumped Specular = 400
  Parallax = 500
  Parallax Specular = 600

ENDCG与CGPROGRAM是对应的,表明CG程序开始与结束（在写Unity的Shader时用的是Cg/HLSL语言）
#pragma surface surfaceFunction lightModel [optionalparams] 编译指令   // #pragma vertex vert  顶点着色器
  1.surface - 声明的是一个表面着色器
  2.surfaceFunction - 着色器代码的方法的名字
  3.lightModel - 使用的光照模型。
sampler2D：在CG中，sampler2D就是和texture所绑定的一个数据容器接口，简单理解sampler2D就是GLSL中的2D贴图的类型
##CG程序，要想访问在Properties中所定义的变量的话，必须使用和之前变量相同的名字进行声明

计算输出时Shader会多次调用surfaceFunction 函数，每次给入一个贴图上的点坐标
CG规定了声明为表面着色器的方法第一个参数是一个Input结构，第二个参数是一个inout的SurfaceOutput结构。
float2 ：表示被打包在一起的2到4个同类型数.
CG程序中一个贴图变量（在我们例子中是_MainTex）之前加上uv两个字母就代表提取它的uv值（就是两个代表贴图上点的二维坐标 ）

tex2D函数:是CG程序中用来在一张贴图中对一个点进行采样的方法，返回float4,对_MainTex在输入点上进行了采样
struct SurfaceOutput {  
    half3 Albedo;     //像素的反射率，反应了像素的基色 
    half3 Normal;     //像素的法向值
    half3 Emission;   //像素的自发光颜色
    half Specular;    //像素的高光指数    
    half Gloss;       //像素的高光光滑度，值越大高光反射越清晰，反之越模糊 
    half Alpha;       //像素的透明度
};


法线贴图(Normal Mapping):
在不增加模型多边形数量的前提下，通过渲染暗部和亮部的不同颜色深度，来为原来的贴图和模型增加视觉细节和真实效果。简单原理是在普通的贴图的基础上，再另外提供一张对应原来贴图的，可以表示渲染浓淡的贴图。
法线图其实是一张RGB贴图，其中红，绿，蓝三个通道分别表示由高度图转换而来的该点的法线指向：Nx、Ny、Nz。在其中绝大部分点的法线都指向z方向，因此图更偏向于蓝色。

void surf (Input IN, inout SurfaceOutput o) {
            half4 c = tex2D (_MainTex, IN.uv_MainTex);

            //4
            o.Normal = UnpackNormal(tex2D(_Bump, IN.uv_Bump)）;

            o.Albedo = c.rgb;
            o.Alpha = c.a;
}
UnpackNormal接受一个fixed4的输入，并将其转换为所对应的法线值（fixed3）。在解包得到这个值之后，将其赋给输出的Normal，就可以参与到光线运算中完成接下来的渲染工作了。

光照模型：
#pragma surface surf CustomDiffuse
inline float4 LightingCustomDiffuse (SurfaceOutput s, fixed3 lightDir, fixed atten) {  
    float difLight = max(0, dot (s.Normal, lightDir));
    float4 col;
    col.rgb = s.Albedo * _LightColor0.rgb * (difLight * atten * 2);
    col.a = s.Alpha;
    return col;
}
按照规则声明一个光照计算的函数名字，即Lighting<Your Chosen Name>
光照模型的计算是在surf方法的表面颜色之后，根据输入的光照条件来对原来的颜色在这种光照下的表现进行计算，最后输出新的颜色值给渲染单元完成在屏幕的绘制。
上面的fullforwardshadows在Unity的内建Shader中，有一个Lighting.cginc文件，里面就包含了fullforwardshadows的实现

SurfaceOutput s这个就是经过表面计算函数surf处理后的输出，我们讲对其上的点根据光线进行处理，fixed3 lightDir是光线的方向，fixed atten表示光衰减的系数。我们先将输入的s的法线值（在Normal mapping中的话这个值已经是法线图中的对应量了）和输入光线进行点积（dot函数是CG中内置的数学函数）。点积的结果在-1至1之间，这个值越大表示法线与光线间夹角越小，这个点也就应该越亮。之后使用max来将这个系数结果限制在0到1之间，是为了避免负数情况的存在而导致最终计算的颜色变为负数，输出一团黑。接下来我们将surf输出的颜色与光线的颜色_LightColor0.rgb（由Unity根据场景中的光源得到的，它在Lighting.cginc中有声明）进行乘积，然后再与刚才计算的光强系数和输入的衰减系数相乘，最后得到在这个光线下的颜色输出（关于difLight * atten * 2中为什么有个乘2，这是一个历史遗留问题，主要是为了进行一些光强补偿）。

float difLight = dot (s.Normal, lightDir);
difLight = difLight * 0.5 + 0.5;  //原来光强0的点，现在对应的值变为了0.5，而原来是1的地方现在将保持为1，暗部被增强变亮了，而亮部基本保持和原来一样，防止过曝


实例化shader:
outlineShaderMaterial = new Material(outlineShader); //使用Shader来执行对画面图像的像素操作，所以我们需要创建一个材质来运行Shader
outlineShaderMaterial.hideFlags = HideFlags.HideAndDontSave;

RenderTexture extraRenderTexture = new RenderTexture(sourceCamera.pixelWidth, sourceCamera.pixelHeight, 16, RenderTextureFormat.Default);

void OnRenderImage(RenderTexture source, RenderTexture destination)
{
	Graphics.Blit(source, extraRenderTexture, outlineShaderMaterial, 0);
	outlineShaderMaterial.SetTexture("_OutlineSource", extraRenderTexture);
	Graphics.Blit(source, destination, outlineShaderMaterial, 1);
}

//函数负责从Unity渲染器中抓取当前的render texture，然后使用Graphics.Blit()函数再传递给Shader（通过source参数），
然后再返回一个处理后的图像再次传递回给Unity渲染器（通过destination参数）。

//一定销毁
extraRenderTexture.Release();
DestroyImmediate(outlineShaderMaterial);
outlineShaderMaterial = null;