1.RollerBall:
float value = Input.GetAxis ("Horizontal"); //一个轴具有-1和1之间的值
bool down = Input.GetButton("Jump");  //如果制定的按钮按下，返回True

m_Rigidbody.AddTorque(new Vector3(moveDirection.z, 0, -moveDirection.x)*m_MovePower); //旋转方向参照左手定则
Physics.Raycast(transform.position, -Vector3.up, 1) //发射点，方向，长度，地下是否有地板

//数组排序
RaycastHit[] m_Hits = Physics.RaycastAll(m_Ray, m_OriginalDist - sphereCastRadius);
RayHitComparer m_RayHitComparer = new RayHitComparer();
Array.Sort(m_Hits, m_RayHitComparer);

public class RayHitComparer : IComparer
{
    public int Compare(object x, object y)
    {
        return ((RaycastHit) x).distance.CompareTo(((RaycastHit) y).distance);
    }
}

//鼠标
Cursor.lockState Cursor.visible Cursor.SetCursor()


protected virtual void Awake()
{
    // do anything
}
protected override void Awake()
{
    base.Awake();
    // do anything
}

Toggle(复选框) .isOn 跟按钮一样可以加事件监听，可以触发监听的物体很多事（看下拉选项）

AudioListener.volume 全局音量大小（0没声）

2.Particles
Button button
var image = button.targetGraphic as Image;
image.sprite = sp;

Button Transiton: 设置为spriteswap模式(可以指定按钮不同状态不同的图片)
	          color tint(颜色)

//简单放大粒子
var systems = GetComponentsInChildren<ParticleSystem>();
foreach (ParticleSystem system in systems)
{
    system.startSize *= multiplier;
    system.startSpeed *= multiplier;
    system.startLifetime *= Mathf.Lerp(multiplier, 1, 0.5f);

    system.Clear(); 
    system.Play(); //重新运用粒子
}

//物体收到瞬间爆炸力
var cols = Physics.OverlapSphere(transform.position, r);
var rigidbodies = new List<Rigidbody>();
foreach (var col in cols)
{
    if (col.attachedRigidbody != null && !rigidbodies.Contains(col.attachedRigidbody))
    {
        rigidbodies.Add(col.attachedRigidbody);
    }
}
foreach (var rb in rigidbodies)
{
    rb.AddExplosionForce(explosionForce=4, 爆炸位置一般是爆炸点, 爆炸受影响半径, 1*multiplier, ForceMode.Impulse);
}

//两个向量直接角度
var v1 = new Vector3(1, 0, 0);
var v2 = new Vector3(-1, 1, 0);
Debug.Log(Vector3.Angle(v2, v1));

move = transform.InverseTransformDirection(move); //变换方向从世界坐标到自身坐标
move = Vector3.ProjectOnPlane(move, m_GroundNormal); //move投影在与 m_GroundNormal 正交的平面上的向量
move = Vector3.Reflect(move, m_GroundNormal); //返回 move 在与 m_GroundNormal 正交的屏幕的反射向量

ThirdPerson：
//检查着地
if (Physics.Raycast(transform.position + (Vector3.up * 0.1f), Vector3.down, out hitInfo, 0.3f))
{
	m_GroundNormal = hitInfo.normal;
	m_IsGrounded = true;
	m_Animator.applyRootMotion = true; //着地则使用动画位移
}
else
{
	m_IsGrounded = false;
	m_GroundNormal = Vector3.up;
	m_Animator.applyRootMotion = false;
}

//设置天空盒
Lighting窗口，Scene中有Skybox属性，设置material
可能代码更改场景天空盒 RenderSettings.skybox = mat;
