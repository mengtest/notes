LuaEnv的使用建议：全局就一个实例，并在Update中调用GC方法，完全不需要时调用Dispose
void Tick()
清除Lua的未手动释放的LuaBase（比如，LuaTable， LuaFunction），以及其它一些事情。
在Update中需要定期调用（1s）。

DoString("require 'byfile'") //DoString("xxx"),默认加载的放在 Global 环境下，后加载的会替换之前的
require实际上是调一个个的loader去加载，有一个成功就不再往下尝试，全失败则报文件找不到
放Resources下的lua文件得加上txt后缀
建议的加载Lua脚本方式是：整个程序就一个DoString("require 'main'")，然后在main.lua加载其它脚本

//StreamingAssets下导不出包，打包时全部用 .txt文件，LoadAllAssets<TextAsset>() 加载的是文本资源
//require lua文件只能放在StreamingAssets或Resources文件下，如果是放Resources下后缀为.lua.txt
//开发时把lua文件放 StreamingAssets目录下，电脑测试用一个main.lua.txt加载所有，再DoString("require 'main'")就行，正式的遍历这个lua包里的所有文件，读取每个文件文本DoString,打包记得main.lua.txt require屏蔽
//电脑上想要测试 hotfix ,每次改完c#代码,必须重新general code ,inject

HotFix 关于这个HotFix是其他热更lua框架所不具备的，原理就是通过特性标记然后在IL（是将.NET代码转化为机器语言的一个中间语言）逻辑层判断修改逻辑，使程序支持热更的lua逻辑代码而不是走之前的C#逻辑

如果是用的开源第三方插件，我们如何快速的让XLua支持，就可以用过Generate Wrap（生成包装）的方式，这一点也是其他lua框架所采取的策略

luaenv.AddLoader((ref string filename) => {
   if (filename == "InMemory")
   {
      string script = "return {pram = 9999}";
      return System.Text.Encoding.UTF8.GetBytes(script);
   }
   return null;
});
luaenv.DoString("print('InMemory.ccc=', require('InMemory').pram)");

LuaTable: （参考c# LuaBehaviour）
TextAsset luaScript; //脚本txt文件
LuaTable scriptEnv;  //脚本代码块，将上面文本赋值给该变量，不用一定要 Dispose
Action luaStart; //引用 lua里的start函数 ，不用一定要 Dispose

LuaTable meta = luaEnv.NewTable();
meta.Set("__index", luaEnv.Global);  //保留原来的_G(全局变量所在的table,如print等方法都在_G里,包括导出到lua的表 如CS.UnityEngine)
scriptEnv.SetMetaTable(meta); //设置元表，所以scriptEnv里代码块可以使用 _G 里的东西
meta.Dispose();  

scriptEnv.Set("self", this); //Set(name,object) 对lua 脚本变量赋值
foreach (var injection in injections)
{
  //传GameObject input:GetComponent("InputField").text
  scriptEnv.Set(injection.name, injection.value);
}

luaEnv.DoString(luaScript.text, "LuaBehaviour", scriptEnv); //scriptEnv 赋值代码块,所以可以访问 文本里的函数
scriptEnv.Set("speed", 30);  // 赋值完代码块，才可以访问 文本里的字段和函数(非 local的)

Action luaAwake = scriptEnv.Get<Action>("awake"); //可以指定返回类型
scriptEnv.Get("start", out luaStart);   //获取 lua 函数（local 类型的不能获取到） 在该脚本里调用


C#访问Lua：
一、获取一个全局基本数据类型
luaenv.Global.Get<int>("a")

二、访问一个全局的table
1.轻量级的by value方式：映射到Dictionary<>，List<>
不想定义class或者interface的话，可以考虑用这个，前提table下key和value的类型都是一致的。

2.//映射到有对应字段的class,table的属性可以多于或者少于class的属性, by value
DClass d = luaenv.Global.Get<DClass>("t");

3.//建议用法 映射到interface实例，要求interface加到生成列表，否则会返回null, by ref,依赖于生成代码
ItfD d3 = luaenv.Global.Get<ItfD>("t");

4、另外一种by ref方式：映射到LuaTable类,没有类型检查,慢
LuaTable d4 = luaenv.Global.Get<LuaTable>("t");

三、访问一个全局的function
1、映射到delegate,建议的方式，性能好很多，而且类型安全。缺点是要生成代码
lua的多返回值映射：从左往右映射到c#的输出参数，输出参数包括返回值，out参数，ref参数

2.映射到LuaFunction,优缺点刚好和上面相反
LuaFunction上有个变参的Call函数，可以传任意类型任意个数的参数，返回值是object的数组，对应于lua的多返回值


Lua调用C# 静态方法用. 类成员方法用：
local newGameObj = CS.UnityEngine.GameObject()
CS.UnityEngine.Time.timeScale = 0.5
local GameObject = CS.UnityEngine.GameObject
GameObject.Find('helloworld')

obj.TestDelegate = lua_delegate + testobj.TestDelegate
obj.TestDelegate = testobj.TestDelegate - lua_delegate

obj:TestEvent('+', lua_event_callback1)
obj:TestEvent('-', lua_event_callback1)

newGameObj:AddComponent(typeof(CS.UnityEngine.ParticleSystem))
obj:GetComponent("InputField")

//协程（引用文件 顺序）
local util = require 'xlua.util'

local gameobject = CS.UnityEngine.GameObject('Coroutine_Runner')
local cs_coroutine_runner = gameobject:AddComponent(typeof(CS.Coroutine_Runner))
local function async_yield_return(to_yield, cb)
    cs_coroutine_runner:YieldAndCallback(to_yield, cb)  //有c#来执行协程
end

local yield_return = util.async_to_sync(async_yield_return) --require 'cs_coroutine'.yield_return 

local co = coroutine.create(function()
    print('coroutine start!')
    local s = os.time()
    yield_return(CS.UnityEngine.WaitForSeconds(3))
    print('wait interval:', os.time() - s)
    
    local www = CS.UnityEngine.WWW('http://www.qq.com')
    yield_return(www)
	if not www.error then
        print(www.bytes)
	else
	    print('error:', www.error)
	end
end)

coroutine.resume(co)


hotfix:
HotfixFlag.Stateless(默认,可以运行的任意时刻执行函数替换)
xlua.hotfix(CS.HotfixCalc, 'Add', function(self, a, b)
   return a + b
end)

HotfixFlag.Stateful（在类增加一个LuaTable类型的字段(中间层面增加，不会改源代码),一开始就执行替换）
xlua.hotfix(CS.StatefullTest, {
                ['.ctor'] = function(csobj) --构造函数的热补丁并不是替换，而是执行原有逻辑后调用lua
                    return {evt = {}, start = 0}
                end;
                set_AProp = function(self, v)
                    print('set_AProp', v)
                    self.AProp = v
                end;
                get_AProp = function(self)
                    return self.AProp
                end;
                get_Item = function(self, k)
                    print('get_Item', k)
                    return 1024
                end;
                set_Item = function(self, k, v)
                    print('set_Item', k, v)
                end;
                add_AEvent = function(self, cb)
                    print('add_AEvent', cb)
                    table.insert(self.evt, cb)
                end;
                remove_AEvent = function(self, cb)
                   print('remove_AEvent', cb)
                   for i, v in ipairs(self.evt) do
                       if v == cb then
                           table.remove(self.evt, i)
                           break
                       end
                   end
                end;
                Start = function(self)
                    print('Start')
                    for _, cb in ipairs(self.evt) do
                        cb(self.start, 2)
                    end
                    self.start = self.start + 1
                end;
                StaticFunc = function(a, b, c)
                   print(a, b, c)
                end;
                GenericTest = function(self, a)
                   print(self, a)
                end;
                Finalize = function(self)  --析构函数的热补丁不是替换，而是开头调用lua函数后继续原有逻辑
                   print('Finalize', self)
                end
           })
        ");
        