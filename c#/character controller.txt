角色控制器主要用于第三人称或第一人称游戏主角控制，并不使用刚体物理效果。不用在添加刚体组件

Height：角色的胶囊碰撞器高度
Slope Limit：碰撞器只能爬小于等于该值的斜坡。
Step Offset：角色可以迈上的最高台阶高度
Min Move Distance：移动的距离小于该值，那角色就不会移动，避免颤抖现象 。 推荐 为0 
Skin width：皮肤厚度决定了两个碰撞器可以互相渗入的深度。较大的皮肤厚值度会导致颤抖。
           小的皮肤厚度值会导致角色被卡住。推荐 半径（Radius）的10%左右

1.控制器不会对加在它自身上的力做出反应，也不会自动推开其他刚体。角色控制器不受力的影响
2.想让角色控制器推开其他刚体或者对象，你可以在对象附加的脚本中添加 OnControllerColliderHit() 函数

使用：
摄像机游览场景的时候，需要控制摄像机不穿透场景中的物体，这需要用到碰撞。物理引擎中有两类的情况可以检测到碰撞，一种是一方是刚体+碰撞器和另一方碰撞器碰撞（参加碰撞器和刚体），另一种就是Character Controller与其他的碰撞器碰撞的时候。

OnControllerColliderHit要被触发，需要在同一脚本中同时要调用角色控制器的Move函数
controller.Move(mMoveDir); //调用Move函数时才运动

SimpleMove(Vector3):以一定的速度移动。将忽略Y轴上的速度,重力被自动应用,返回值是是否着地。

/角色控制器组件在与具有Collider组件对象之间的碰撞
void OnControllerColliderHit(ControllerColliderHit hit)
{

	//判断碰撞的对象是否具备刚体组件
	GameObject hitObject = hit.collider.gameObject;
	Rigidbody rigidbody = hitObject.rigidbody;
	if(rigidbody != null && !rigidbody.isKinematic)
	{
		//地面也具备刚体组件，这里判断一下
		if(!hitObject.name.Equals("Terrain") )
		{
			rigidbody.AddForce(new Vector3(hit.moveDirection.x, 0, hit.moveDirection.z) * 10);
		}
	}

}


//NavMeshAgent
Radius：保持跟障碍物的距离，要比自身范围大点
Stopping distance：接近目标到这个距离时，代理将停止（小等于攻击距离）
Auto Braking：将在到达目的地时减速

设置行走的遮罩层（Cost属性：数值越大，从此寻路的消耗越大，寻路物体在区域消耗数值一样的情况下，会选择最优（最近）路面寻路，但如果寻路区域的消耗数值不同，会根据消耗的数值，越小越最优进行寻路。）

//转向
transform.LookAt(new Vector3(point.x, transform.position.y, point.z));
//设置寻路的目标点
agent.SetDestination(point);
//播放动画，判断是否到达了目的地，播放空闲或者跑步动画
//播放动画，判断是否到达了目的地，播放空闲或者跑步动画
if (agent.remainingDistance == 0)
{
    Debug.Log("到达目的地");
}
else
{
    
}

NavMeshObstacle 分为两种模式，一种是普通模式，通过设置半径和高度来确定一个范围，阻档NavMeshAgent移动，一种是Carve模式，在导航网格上，根据模型的大小，挖出一个“洞”，使模型范围内的导航网格消失，这样NavMeshAgent就不能经过次区域了。

Move Threshold:当模式为Carve时，此物体的移动距离超过这个阀值后，更新当前的导航网格（从新挖洞）。
Carve：是否打开在导航网格挖洞的模式

Carve模式的一些总结：
1.在Bake场景的时候，Navigation窗口的Bake页面有一个高度值，场景中的导航网格通常作为一个平面，当NavMeshObstacle 距离小于这个高度时，
才会在导航网格上挖洞，否则NavMeshObstacle 还是以普通模式存在的。
2.NavMeshObstacle 在刚创建的时候最好先关闭NavMeshObstacle 这个组件，但需要是再打开，在跟NavMeshAgent混用时，不能共用（同时激活状态），

怪物AI:
1.给要寻路的对象加上NavMeshAgent和 NavMeshObstacle组件,NavMeshObstacle去掉勾选，处于不激活状态
2.代码逻辑判断，当对象到达目标位置时 就先设置NavMeshAgent不启用，NavMeshObstacle为启用，
这样后面跟上来的 怪或兵就会自动判断到前面有阻挡物 自动避让 重新寻找新的位置
3.当 重新选择目标时，逻辑代码编写NavMeshObstacle先不启用，然后设置NavMeshAgent启用，设置新的目的地就可以了

5.6新导航
1.NavMeshSurface：烘焙世界中哪部分应该被bake成NavMesh，agent可以走的区域，不同类型的agent分别烘焙
（该组件可以不需要设置物体Navigition static的静态属性）
Default Area: 默认生成区域类型Walkable. not walkable时如果agent在该区域，导航报错没有可走的navmesh
Override Tile Size:在障碍物多的时候，可以将块减小以提升运行效率。或者打算实时bake的时候，可以用更小的Tile Size来降低内存消耗 
2.NavMesh Modifier：对一些要用来被NavMeshSurface组件bake的物体进行微调（如小区域设置为不可走），作用效果包括其下的所有子物体
3.NavMesh Modifier Volume：与NavMesh Modifier差不多，作用于对体积盒包围的所有物体（或物体的部分）
4.nav mesh link:连接两个不相连的同类型的navmesh，agent可以通过该桥梁两端进入对方
Bidirectional：勾上时线的方向为双向，没勾时只能start-to-end单向

a.LocalNavMeshBuilder:动态生成更新在其立方盒里标记为NavMeshSourceTag组件的物体组合的navmesh（AI.NavMeshBuilder，AI.NavMeshBuildSource）
b.NavMeshSourceTag:新物体要动态产生navmesh需挂载该脚本