值类型: 枚举，数值，结构体，布尔
引用类型：string,数组，object

装箱：值类型转换为对象类型时
拆箱：一个对象类型转换为值类型

值类型是在栈中分配内存，它们有自身的生命周期，所以不用对它们进行管理，会自动分配和释放。
而引用类型是在堆中分配内存的。所以它的分配和释放就需要像回收机制来管理。

数组和链表的区别：（都是线性结构）
1.数组静态分配内存，链表动态分配内存；
2.数组在内存中连续，链表不连续；(数组可能造成内存浪费)
3.数组元素在栈区,链表元素在堆区（数组无需初始化,元素在内存的栈区,系统自动申请空间.链表的结点元素在内存的堆区,每个须手动申请空间
4.数组利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度O(n)；
5.数组插入或删除元素的时间复杂度O(n)，链表的时间复杂度O(1)(数组大小固定,查询快但无法灵活高效的插入，删除。而堆操作灵活性更强)
(访问链表中一个元素，需要从第一个元素开始，一直找到需要的元素位置。但是增加和删除一个元素对于链表数据结构就非常简单了，只要修改元素中的指针就可以了)

default(T)是指把调用T类型的默认构造函数对其进行初始化，
如，int a=default(int);则a=0；如果T类型是引用类型的话，则初始化为null

C#代码通过C#编译器编译成程序集，程序集由微软中间语言组成，CLR会为程序集开辟一个应用程序域，程序集就是运行在这个应用程序域里面的。
托管代码:被CLR管理的代码。
非托管代码：不被CLR管理的代码。

分配在栈空间的变量，一旦执行完成其所在的作用域（即大括号范围）就会被CLR回收。释放内存
分配在堆里面的对象，当没有任何变量引用它的时候，这个对象就被标记为“垃圾对象”，等待垃圾回收器回收。

GC会定时清理堆里面的垃圾对象，GC的清理频率程序员无法决定，CLR会自动控制。当一个对象标记为垃圾的时候，这个对象不一定会被立即回收。

当堆里面的对象有1W个的时候，GC是不是循环1W次来判断是否为“垃圾对象”，然后对其进行回收呢？答案是否定的，
堆里面总共有3代，当程序运行时，有对象需要存储在堆里面，GC就会创建第1代（假设空间大小为256K），
对象就会存储在第0代里面，当程序继续运行，运行到第0代的大小不足以存放对象，这时候就就会创建第1代（假设空间为10M），
GC就会把第0代里面的“垃圾对象”清理掉，把“活着”的对象放在第1代，这时候第0代就空了，用于存放新来的对象，
当第0代满了的时候，就会继续执行以上操作，随着程序的运行，第1代不能满足存放要求，这时候就会创建第2代，

GC.GetGeneration(P)得到指定的对象对应的代,总共有三代。
GC.Collect();//让垃圾回收器对所有的代进行回收。
GC.Collect(1)//回收第0代和第1代回收。

Hashtable 和 Dictionary <K, V> 类型 

1）：单线程程序中推荐使用 Dictionary, 有泛型优势, 且读取速度较快, 容量利用更充分.
2）：多线程程序中推荐使用 Hashtable, 默认的 Hashtable 允许单线程写入, 多线程读取, 对 Hashtable 进一步调用 Synchronized()方法可以获得完全线程安全的类型. 而Dictionary 非线程安全, 必须人为使用 lock 语句进行保护, 效率大减.
3）：Dictionary 有按插入顺序排列数据的特性 (注: 但当调用 Remove() 删除过节点后顺序被打乱), 因此在需要体现顺序的情境中使用 Dictionary 能获得一定方便.

HashTable的优点就在于其索引的方式，速度非常快。如果以任意类型键值访问其中元素会快于其他集合，特别是当数据量特别大的时候，应用场合有：做对象缓存，树递归算法的替代，和各种需提升效率的场合。

HashSet<T> 和 List<T>  空间复杂度：内存块数量
List<T>里面是线序集，空间复杂度O(1)，contains查找时间还是O(n)（重头查到尾）
HashSet<T>里面是散列表，无序不重，空间复杂度O(n)，contains查找时间还是O(1)（查找根据对象的Hash值直接定位）

ArrayList不是类型安全的,插入值类型时会发生装箱操作,造成性能问题

const 必须在定义的时候赋值而且不能更改, readonly定义的时候可以在定义的时候赋值，也可以在构造函数中赋值
const 字段是编译时常数，而 readonly 字段可用于运行时常数。
const 默认就是静态的，而 readonly 如果设置成静态的就必须显示声明。

try
{
   int result = 10/ 0; // 引起异常的语句
}
catch (Exception e)
{
    // 错误处理代码
    Console.WriteLine("Exception caught: {0}", e);
    Throw e；//抛出异常
}
finally
{
    result = 1；// 要执行的语句
}

assert(expression ) 频繁的调用会极大的影响程序的性能，增加额外的开销
assert的作用是现计算表达式 expression ，如果其值为假（即为0），那么它先向stderr打印一条出错信息，
然后通过调用 abort 来终止程序运行。不为0，则继续执行后面的语句

定义在函数内部的局部变量函数：
Func<函数参数类型, 函数返回类型> getType = (x) =>
{
   return "";
};


类：sealed 不可继承
调用父类构造函数 初始化成员变量
public 类名(double l, double w) : base(l, w)
{ }
与父类同名函数可以
public void Display()  //重写父类方法
{
   base.Display();
   //anyting
}

1.静态多态性 函数名相同 参数不同  //重载方法
void print(int i){}
void print(double f){}

2.动态多态性（通过 抽象类 和 虚方法 实现）
abstract class Shape
{
  public abstract int area();
}
或
public virtual int area()
{
 Console.WriteLine("父类的面积：");
 return 0;
}
子类实现：
public override int area ()
{
 return (width * height); 
}

接口：(子类必须实现所有接口成员)
public interface BaseFish2
{
   // 接口成员
   void Swim(); 默认是 public
   double func2();
}
transform.GetComponent<BaseFish2>().Swim();  //可以用 接口父类 获取组件，可以调用 在子类中实现的接口方法
**transform.GetComponent<BaseFish>().Swim(); //可以用 父类 获取组件，但是访问的是父类成员，不会调用到子类成员
反射：
Type t = typeof(RefClass);
MemberInfo[] minfos = t.GetMembers(); //默认返回公开的所有成员包括父类的
//GetMembers(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public )
foreach (MemberInfo minfo in minfos)
{
  Console.WriteLine(minfo.Name);
}

//字段
RefClass rc = new RefClass(); //实例只能访问公有接口
FieldInfo[] finfos = t.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);
foreach (FieldInfo finfo in finfos)  //私有和保护的字段也能访问
{
  finfo.SetValue(rc, 100);
  Console.WriteLine("字段名称：{0}  字段类型:{1} rc中的值为:{2}", finfo.Name, finfo.FieldType.ToString(), finfo.GetValue(rc));
}

//属性
PropertyInfo[] finfos = t.GetProperties(...);
 7             foreach (PropertyInfo finfo in finfos)
 8             {
 9                 MethodInfo getinfo = finfo.GetGetMethod(true);  //get方法
10                 Console.WriteLine("get方法的名称{0}  返回值类型:{1}  参数数量:{2}  MSIL代码长度:{3} 局部变量数量:{4}", getinfo.Name, getinfo.ReturnType.ToString(),
11                     getinfo.GetParameters().Count(),
12                     getinfo.GetMethodBody().GetILAsByteArray().Length, 
13                     getinfo.GetMethodBody().LocalVariables.Count);
14 
15                 MethodInfo setinfo = finfo.GetSetMethod(true);  //set方法
16                 Console.WriteLine("get方法的名称{0}  返回值类型:{1}  参数数量:{2}  MSIL代码长度:{3} 局部变量数量:{4}", setinfo.Name, setinfo.ReturnType.ToString(),
17                     setinfo.GetParameters().Count(),
18                     setinfo.GetMethodBody().GetILAsByteArray().Length,
19                     setinfo.GetMethodBody().LocalVariables.Count);
20 
21                 setinfo.Invoke(rc, new object[] { 123 }); //通过调用set赋值
22                 object obj = getinfo.Invoke(rc, null);  //通过调用get取值
23                 Console.WriteLine("方法名:{0}  内部值:{1}", finfo.Name, obj);
24             }

//方法
MethodInfo[] finfos = t.GetMethods(）
foreach (MethodInfo finfo in finfos)
 8             {
 9                 if (finfo.GetParameters().Count() > 0 && finfo.GetParameters()[0].ParameterType == typeof(string) )
10                 {
11                     object obj = finfo.Invoke(rc, new[] { "123" }); //调用传入"123"，返回 obj
12                     MethodBody mbody = finfo.GetMethodBody();
13                     Console.WriteLine("拥有参数的方法名:{0}  返回值类型:{1}  参数1类型:{2}  参数1名称:{3}  方法调用后返回的值:{4}",
14                         finfo.Name,
15                         finfo.ReturnType.ToString(),
16                         finfo.GetParameters()[0].ParameterType.ToString(),
17                         finfo.GetParameters()[0].Name,
18                         obj.ToString());
19                 }
20                 else
21                 {
22                     MethodBody mbody = finfo.GetMethodBody();
23                     Console.WriteLine("没有参数的方法名:{0}  返回值类型:{1}",
24                         finfo.Name,
25                         finfo.ReturnType.ToString());
26                 }
27             }

MemberInfo{
   public abstract MemberTypes MemberType { get; } /成员类型
   public abstract string Name { get; }  //成员名，及变量，函数名
   public abstract Type ReflectedType { get; }
   public abstract object[] GetCustomAttributes(bool inherit);
}
 public enum BindingFlags
    {
        Default = 0,
        IgnoreCase = 1,
        DeclaredOnly = 2,  //不包括父类的
        Instance = 4,  //包含实例成员
        Static = 8,
        Public = 16,  //包含公开
        NonPublic = 32, //包含非公开
        FlattenHierarchy = 64,
        InvokeMethod = 256,
        CreateInstance = 512,
        GetField = 1024,
        SetField = 2048,
        GetProperty = 4096,
        SetProperty = 8192,
        PutDispProperty = 16384,
        PutRefDispProperty = 32768,
        ExactBinding = 65536,
        SuppressChangeType = 131072,
        OptionalParamBinding = 262144,
        IgnoreReturn = 16777216,
    }
 public enum MemberTypes
    {
        Constructor = 1,
        Event = 2,
        Field = 4, //字段（int a）
        Method = 8, //方法
        Property = 16, //属性(int Test2 { get; set; },Test2是属性 )
        TypeInfo = 32,
        Custom = 64,
        NestedType = 128,
        All = 191,
    }


特性（Attribute）：附加的声明性信息
1.AttributeUsage ：描述了如何使用一个自定义特性类
 2 [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] //Help特性只能被放在class的前面
 3 public class HelpAttribute : Attribute 
 4 { 
	public double version;
 5     public HelpAttribute(String Description_in)  //构造函数的参数是自定义特性的定位参数
 6     { 
 7         this.description = Description_in; 
	   version = 1.0;   //[Help("BaseClass"), version = 1.1)]
 8     } 
 9     protected String description; 
10     public String Description 
11     { 
12         get 
13         { 
14             return this.description; 
15         } 
16     } 
17 }
AttributeTargets：Assembly,Module,Class,Struct,Enum,Constructor,Method,Property,Field,Event,Interface,Parameter,Delegate
AllowMultiple = false。它规定了特性不能被重复放置多次
Inherited, 表明当特性被放置在一个基类上时，它能否被派生类所继承。
[Help("BaseClass")] 
2 public class Base 
3 { 
4 } 
5 [Help("DeriveClass")] 
6 public class Derive : Base 
7 { 
8 }
inherited设置为true，AllowMultiple设置为false。因此基类的Help特性被派生类Help特性覆盖了。
inherited设置为true，AllowMultiple设置为true. 派生类既有基类的Help特性

2.Conditional  指示编译器应忽略方法调用或属性，除非已定义指定的条件编译符号
[Conditional("DEBUG"), Conditional("TEST1")]

3.Obsolete
[Obsolete("弃用提示语", true)] true：编译错误 false:警告，该方法还可以调用


方法中的this参数:
public static class StringExtension
{
    public static void Foo(this string s)
    {
        Console.WriteLine("Foo invoked for {0}", s);
    }
}
string s="Hello";
s.Foo(); //Foo invoked for Hello 
其实这就是扩展方法！这个扩展方法在静态类中声明，定义一个静态方法，其中第一个参数定义可它的扩展类型。Foo()方法扩展了String类，
因为它的第一个参数定义了String类型，为了区分扩展方法和一般的静态方法，扩展方法还需要给第一个参数使用this关键字。

归纳：扩展方法可以写入最初没有提供该方法的类中。还可以把方法添加到实现某个接口的任何类中，这样多个类可以使用相同的实现代码