包括 CPU,GPU,内外存
GPU消耗是性能优化的重中之重。

UI一般影响CPU的因素包括：
  界面结构复杂度
  界面结构变化频率
  动画复杂度

UI一般影响GPU的因素包括：
  绘制次数（drawcall），和单张图片的数量等因素相关
  图片最终在屏幕所展现的面积
  图片是否透明
  shader的复杂度
  重绘度（overrdraw，单位像素的重新绘制次数）

一般影响外存的因素包括：
  图片数目
  图片的分辨率大小
  图片是否压缩
另外，优化了外存，内存往往也会从中受益
。

多张UI图片可以打包在一起(首先将你的图片拖入unity中，将同一图集的所有图片的packing tag设置成一个名子即可,保存在和Assets文件夹同级的目录，Libary/AtlasCache里面。注意你的图片不能放在Resources文件夹下面，Resources文件夹下的资源将不会被打入图集)


尽量少的使用反光啦，阴影啦之类的，因为那会使物体多次渲染。


开发中做到：
1.ugui中Raycast Target 不要打勾（不要事件） ngui中不要碰撞体
2.使用图集，图片没必要的透明通道不要
3.尽可能减少3d模型中三角形的数目，尽可能重用顶点，移除不必要的Hard Edge以及纹理衔接，即避免Smoothing splits和UV splits。
4.meshcollider最好不要使用
5.减少材质使用，或是批处理物体（前提是要使用同一个材质）
6.图片设置面板 Generate Mip Maps 不要打勾。其会为同一张纹理创建出很多不同大小的小纹理，构成一个纹理金字塔。而在游戏中可以根据距离物体的远近，来动态选择使用哪一个纹理
7.如地板 物体设为static
8.update里面避免GameObject.FindWithTag("")、GetComponent这样的调用，可以预先存起来