包括 CPU,GPU,内外存

CPU中的计算主要是在蒙皮骨骼计算，布料模拟，顶点动画，粒子模拟,物理等
GPU则在各种顶点变换、光照、贴图混合等

UI一般影响CPU的因素包括：
  界面结构复杂度
  界面结构变化频率
  动画复杂度

UI一般影响GPU的因素包括：(同屏30w，dc150,2000手机60帧无压力)
  绘制次数（batches(即drawcall)不要超过300，同屏面数控制在30w,使用同一材质球 saced by batching 会加1，表示
  图片最终在屏幕所展现的面积
  图片是否透明
  shader的复杂度
  重绘度（overrdraw，单位像素的重新绘制次数）

一般影响外存的因素包括：
  图片数目
  图片的分辨率大小
  图片是否压缩

1.武器面数 武器模型控制在150个三角面，187个顶点以内。贴图控制在1张，最大256*256，最好128*128。
2.场景面数场景（地形、建筑、其他装饰物）面数控制在10000面左右，贴图控制在最多2张512*512。
3.主角面数 主角模型控制在900-1300个三角面。贴图控制在1张，最好256×256，最多512×512。
4.小怪面数 小怪模型控制在600-900个三角面（以最终导入unity3d中的三角面数量为准）。贴图控制在1张，最大256×256。

多张UI图片可以打包在一起(将同一图集的所有图片的packing tag设置成一个名子可减少batches）
保存在和Assets文件夹同级的目录，Libary/AtlasCache里面。注意你的图片不能放在Resources文件夹下面，Resources文件夹下的资源将不会被打入图集)

PNG相比于JPEG的有损压缩，它的压缩是无损的；它虽然对于Alpha透明的处理不像TGA那么出色，但是它既压缩文件同时又能保证足够好的Alpha映射
jpg : 有损压缩 文件小 不支持透明
png: 无损压缩 文件小 支持透明，运行时自动解压解析，内存占用变大
tag：无所压缩 文件大 支持透明
dds : 无损压缩 文件最小 支持透明 不支持iOS

纹理压缩策略：
1.RGBA32：高清晰无压缩.png，无需二次方大小   (适用于UI)
2.RGBA16+Dithering(颜色数较高的有明显的色阶 ,平滑细节)  无需二次方大小   (适用于UI)
3.ETC1不支持 Alpha  、ETC2:Android 4.3开始支持 GLES 3.0   需二次方 长宽可不一样(适用于3D物体的纹理)
 PVRTC4：低清晰高压缩 需要二次方正方形  (适用于3D物体的纹理)
TexturePacker预先生成好正方形的IOS PVRTC4图集和非正方形的Android ETC1图集

在做ECT1和PRVC 处理的时候，一张1136*640，会被unity处理成1024*512。在UI上会有失真. 
设置Non Power of 2，选None；这一步操作不做2的N次的压缩拉伸，图片不变形

2的幂是因为光栅化需要对纹理采样进行快速取值，由此约定所有传入表面（Surface）必须是2的幂。
引擎层做了一次纹理过滤把非2幂的纹理拉伸或压缩到2的幂再传入（比如Mipmap层级），由此实现允许任意纹理传入。
有些GUP不支持NPOT，遇到NPOT会有一个转换POT的过程，浪费性能

安卓上建议使用ETC2(支持Alpha通道)，搭配Unity的Crunched算法，效果更佳。RGB24/RGBA32确实不建议使用，主要是会占用显存带宽，但是效果确实好。
ASTC可以考虑在iOS上用起来
尽量少的使用反光阴影啦之类的，因为那会使物体多次渲染。


开发中做到：
1.ugui中Raycast Target 不要打勾（不要事件） ngui中不要碰撞体
2.使用图集，图片没必要的透明通道不要
3.尽可能减少3d模型中三角形的数目，尽可能重用顶点，移除不必要的Hard Edge以及纹理衔接，即避免Smoothing splits和UV splits。
4.meshcollider最好不要使用
5.减少材质使用，或是批处理物体（要使用同一个材质，同材质不同贴图的可以把贴图做成图集但是UV需重新映射）
6.图片设置面板 Generate Mip Maps 不要打勾。其会为同一张纹理创建出很多不同大小的小纹理，构成一个纹理金字塔。而在游戏中可以根据距离物体的远近，来动态选择使用哪一个纹理
7.如地板 物体设为static
8.update里面避免GameObject.FindWithTag("")、GetComponent这样的调用，可以预先存起来

9.背景音乐(使用.ogg或.mp3的压缩格式)：取消Preload Audio Data（预加载音频数据）选项。然后把Override for Android选项勾上，并且设置Load Type为Streaming（音频剪辑将放入缓存区中，并且从缓存区中播放，一旦播放完载掉）。使用.ogg或.mp3的压缩格式
音效(使用.wav和.aif的未压缩音频格式)：Load Type设置为Decompress on Load加载的时候进行解压缩，使用.wav和.aif的未压缩音频格式。

10. 减少FPS，在ProjectSetting-> Quality中的  省电，减少手机发热的情况；
VSync Count 参数会影响你的FPS，EveryVBlank相当于FPS=60，EverySecondVBlank = 30；
这两种情况都不符合游戏的FPS的话，我们需要手动调整FPS，首先关闭垂直同步这个功能，然后在代码的Awake方法里手动设置FPS（Application.targetFrameRate = 45;）

因为垂直同步的存在，才能使得游戏进程和显示器刷新率同步，使得画面更加平滑和稳定。
取消了垂直同步信号，固然可以换来更快的速度，但是在图像的连续性上势必打折扣。

11. 当我们设置了FPS后，再调整下Fixed timestep这个参数，
这个参数在ProjectSetting->Time中，目的是减少物理计算的次数，来提高游戏性能。

12.粒子特效：粒子数，粒子大小，粒子纹理去掉alpha通道(透明的粒子效果，会造成大量的overdraws)

在屏幕外的物体，和active(false) 的物体unity不会去绘制(不会调drawcall)
Unity不支持对SkinnedMeshRenderer进行批处理，也不支持对使用了阴影的MeshRenderer进行批处理

Static Batching:
条件：1.相同材质（网格可以不一样） 2.不能移动 
unity尽可能多的网格结合到一个静态网格中，将其作为一个drawcall 提交，所以可能会 增加内存

Dynamic Batching（系统自动，仅支持MeshRenderer，不支持SkinnedMeshRenderer）
条件：1.网格少于900个顶点于（于mesh粒子来说是300个限制）
      2.不能镜像了（-1,1,1）
      3.同一材质（材质实例同一个），完全光照贴图的位置
      4.不使用Multi-pass着色器的情况（）	

**Renderer.material获取Material引用时，会把Render里Materials列表第一个预设的Material进行实例化，并将返回实例。
这样，当我们对这个物体的Material进行修改时，只会修改实例，而不会修改到最原本的材质球
Renderer.sharedMaterial接口，Unity则不会多此一举地帮我们做实例化，再返回实例了，直接就是返回最原本的材质球

GPU Instancing
 条件：1.相同网格,允许每个实例拥有各自的数据集，包括位置，旋转和颜色。
       2.勾选材质设置上的“Enable Instancing”复选框

13.代码优化
1.GetComponent<>(); 使用范型，不在update或循环中一直调用
2.不用gameObject.transform的形式访问组件，可以缓存gameObject上transform组件的引用再用
3.不要直接用类似gameObject.rigidbody，Rigidbody组件不存在时开销很大，用GetComponent做rigidbody缓存

CPU限制它的主要是游戏中的Draw Calls（静态+使用相同材质），过多的Draw Calls，耗时，影响帧率，游戏性能就会下降
CPU性能瓶颈还有物理、布料模拟、粒子模拟等，都是计算量很大的操作。

GPU：处理CPU传递过来的模型数据，进行Vertex Shader、Fragment Shader等一系列工作，最后输出屏幕上的每个像素
顶点和像素两方面的性能瓶颈（顶点数目的过多，像素绘制了多次）

顶点优化:
优化几何体(尽可能减少模型中三角形的数目,尽可能重用顶点)
使用LOD（Level of detail）技术（优化游戏渲染效率的常用方法，缺点是占用大量内存，空间换时间）：LODGroup组件(T4M的LOD原理：检测物体到相机的距离决定使用哪个meshRenderer)
使用遮挡剔除（Occlusion culling）技术(用来消除躲在其他物件后面看不到的物件，Unity 将确定只把可以看见的物体送去渲染,这代表资源不会浪费在计算那些看不到的顶点上，进而提升性能)
(unity裁剪包括，视锥裁剪()和遮挡裁剪)

像素优化:
控制绘制顺序
警惕透明物体(透明的粒子效果，会造成大量的overdraws)
减少实时光照

CPU优化:
减少Draw Calls

带宽优化:
减少纹理大小(特效纹理合并纹理到大图)
利用缩放

Animator组件在Enable时，需要重建内部数据，导致了异常的卡顿
尽量避免使用SetActive，改成SetLayer+Behaviour.Enable=false的效率能好很多

动画文件优化：只裁剪动画文件的压缩精度，没有引起Curve减少。BlobSize是不会有任何变化的，因为每个浮点数固定占32bit，而文件大小、AB大小、Editor下的内存都会变小；
裁剪动画文件的精度：裁剪精度所以动画的点更稀疏了，而连续相同的点更多，所以Dense Curve是减少了，Constant Curve是增多了，总的内存是减小了

1.FBX上的Read/Write Enabled关闭后，内存中便不再保存其Mesh的副本（只存在显存中），供粒子系统使用的Mesh是需要开启Read/Write Enabled的
2.资源冗余得越多，切换场景时，UnloadUnusedAssets的开销越大，进而增加了场景的切换时间

sz:
1.后处理性能优化(后处理对性能影响很大)：
ImageEffects Temp (2038x1080, ARGB32, 8M): 
void OnRenderImage(RenderTexture src,RenderTexture dest)  //导致严重的掉帧,如果不后处理一定不要有这个函数，每帧都被调用，而且还为了参数创建了RT！
{
    Graphics.Blit(src, dest, mat)
} 
如果相机未赋值RT,unity会自动创建RT来渲染整个GPU信息，
解决方案: 在OnPreRender(在摄像机开始渲染场景之前调用)中，奖rendertexture赋值给camera，在OnPostRender(场景渲染完成之后调用)中，处理后处理渲染(只有在不需要HDR效果下，才有优化效果)

2.GrabPass Temp (2038x1080, ARGB32, 16M): 
GrabPass 捕捉屏幕纹理/做火焰的扭曲效果或者地震波效果: 用来截屏，截屏后把纹理传给下一个通道使用
将BackBuffer中的内容拷贝到一张叫做_GrabTexture的贴图
a. 效率极低，因为是要从显存到内存，然后再到显存，对带宽要求很高。

3.Occlusion Culling遮挡剔除
a.摄像机自带视椎剔除(相机视角内的物体才会渲染)
b.剔除动态物体，需要使用Occlusion Area 组件, 存在静态遮挡物（occluder static）的情况下，可以把在Occlusion Area范围内运动被静态遮挡物遮挡的动态物体剔除
c.摄像机要在Occlusion Area内才能遮挡物剔除（当然不创建Occlusion Area的话默认整个场景），否则只有自带的视椎剔除，另外地形烘焙会略微增加运行时cpu消耗和发布文件大小。记得物体的静态设置，物体的大小对遮挡很有影响。

4.lua字符串gc
5.UI预设none,马甲包资源缓存