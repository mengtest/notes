包括 CPU,GPU,内外存
GPU消耗是性能优化的重中之重。

UI一般影响CPU的因素包括：
  界面结构复杂度
  界面结构变化频率
  动画复杂度

UI一般影响GPU的因素包括：
  绘制次数（drawcall），和单张图片的数量等因素相关
  图片最终在屏幕所展现的面积
  图片是否透明
  shader的复杂度
  重绘度（overrdraw，单位像素的重新绘制次数）

一般影响外存的因素包括：
  图片数目
  图片的分辨率大小
  图片是否压缩
另外，优化了外存，内存往往也会从中受益。

去除UI图片中不必要的通道、不必要的区域，如背景是没必要有透明通道的。
UI图片一般情况下都不需要mipmap
多张UI图片可以打包在一起(首先将你的图片拖入unity中，将同一图集的所有图片的packing tag设置成一个名子即可,保存在和Assets文件夹同级的目录，Libary/AtlasCache里面。注意你的图片不能放在Resources文件夹下面，Resources文件夹下的资源将不会被打入图集)

针对drawcall主要就是每个物体尽量减少渲染次数，多个物体最好一起渲染。

使用Draw Call Batching，也就是描绘调用批处理。Unity在运行时可以将一些物体进行合并，从而用一个描绘调用来渲染他们。具体下面会介绍。
通过把纹理打包成图集来尽量减少材质的使用。
尽量少的使用反光啦，阴影啦之类的，因为那会使物体多次渲染。

Static Batching 静态批处理 物体设为static