包括 CPU,GPU,内外存

CPU中的计算主要是在蒙皮骨骼计算，布料模拟，顶点动画，粒子模拟等
GPU则在各种顶点变换、光照、贴图混合等

UI一般影响CPU的因素包括：
  界面结构复杂度
  界面结构变化频率
  动画复杂度

UI一般影响GPU的因素包括：(同屏30w，dc150,2000手机60帧无压力)
  绘制次数（batches(即drawcall)不要超过300，同屏面数控制在30w,使用同一材质球 saced by batching 会加1，表示
  图片最终在屏幕所展现的面积
  图片是否透明
  shader的复杂度
  重绘度（overrdraw，单位像素的重新绘制次数）

一般影响外存的因素包括：
  图片数目
  图片的分辨率大小
  图片是否压缩

1.武器面数 武器模型控制在150个三角面，187个顶点以内。贴图控制在1张，最大256*256，最好128*128。
2.场景面数场景（地形、建筑、其他装饰物）面数控制在10000面左右，贴图控制在最多2张512*512。
3.主角面数 主角模型控制在900-1300个三角面。贴图控制在1张，最好256×256，最多512×512。
4.小怪面数 小怪模型控制在600-900个三角面（以最终导入unity3d中的三角面数量为准）。贴图控制在1张，最大256×256。

多张UI图片可以打包在一起(将同一图集的所有图片的packing tag设置成一个名子可减少batches）
保存在和Assets文件夹同级的目录，Libary/AtlasCache里面。注意你的图片不能放在Resources文件夹下面，Resources文件夹下的资源将不会被打入图集)

PNG相比于JPEG的有损压缩，它的压缩是无损的；它虽然对于Alpha透明的处理不像TGA那么出色，但是它既压缩文件同时又能保证足够好的Alpha映射
jpg : 有损压缩 文件小 不支持透明
png: 无损压缩 文件小 支持透明，运行时自动解压解析，内存占用变大
tag：无所压缩 文件大 支持透明
dds : 无损压缩 文件最小 支持透明 不支持iOS

纹理压缩策略：
1.RGBA32：高清晰无压缩.png，无需二次方大小
2.RGBA16+Dithering  无需二次方大小
3.ETC1+Alpha 、PVRTC4：低清晰高压缩 需要二次方
TexturePacker预先生成好正方形的IOS PVRTC4图集和非正方形的Android ETC1图集

在做ECT1和PRVC 处理的时候，一张1136*640，会被unity处理成1024*512。在UI上会有失真. 
设置Non Power of 2，选None；这一步操作不做2的N次的压缩拉伸，图片不变形

2的幂是因为光栅化需要对纹理采样进行快速取值，由此约定所有传入表面（Surface）必须是2的幂。
引擎层做了一次纹理过滤把非2幂的纹理拉伸或压缩到2的幂再传入（比如Mipmap层级），由此实现允许任意纹理传入。
有些GUP不支持NPOT，遇到NPOT会有一个转换POT的过程，浪费性能

在项目中，尽可能是使用ETC1和PVRTV4等GPU直接支持的图片格式，不仅内存占用低、性能也更好
1. 更新不透明贴图的压缩格式为ETC 4bit，因为android市场的手机中的GPU有多种，每家的GPU支持不同的压缩格式，但他们都兼容ETC格式，
2. 对于透明贴图，我们只能选择RGBA 16bit 或者RGBA 32bit。

尽量少的使用反光阴影啦之类的，因为那会使物体多次渲染。

开发中做到：
1.ugui中Raycast Target 不要打勾（不要事件） ngui中不要碰撞体
2.使用图集，图片没必要的透明通道不要
3.尽可能减少3d模型中三角形的数目，尽可能重用顶点，移除不必要的Hard Edge以及纹理衔接，即避免Smoothing splits和UV splits。
4.meshcollider最好不要使用
5.减少材质使用，或是批处理物体（要使用同一个材质，同材质不同贴图的可以把贴图做成图集但是UV需重新映射）
6.图片设置面板 Generate Mip Maps 不要打勾。其会为同一张纹理创建出很多不同大小的小纹理，构成一个纹理金字塔。而在游戏中可以根据距离物体的远近，来动态选择使用哪一个纹理
7.如地板 物体设为static
8.update里面避免GameObject.FindWithTag("")、GetComponent这样的调用，可以预先存起来

9.背景音乐(使用.ogg或.mp3的压缩格式)：取消Preload Audio Data（预加载音频数据）选项。然后把Override for Android选项勾上，并且设置Load Type为Streaming（音频剪辑将放入缓存区中，并且从缓存区中播放，一旦播放完载掉）。使用.ogg或.mp3的压缩格式
音效(使用.wav和.aif的未压缩音频格式)：Load Type设置为Decompress on Load加载的时候进行解压缩，使用.wav和.aif的未压缩音频格式。

10. 减少FPS，在ProjectSetting-> Quality中的  省电，减少手机发热的情况；
VSync Count 参数会影响你的FPS，EveryVBlank相当于FPS=60，EverySecondVBlank = 30；
这两种情况都不符合游戏的FPS的话，我们需要手动调整FPS，首先关闭垂直同步这个功能，然后在代码的Awake方法里手动设置FPS（Application.targetFrameRate = 45;）

因为垂直同步的存在，才能使得游戏进程和显示器刷新率同步，使得画面更加平滑和稳定。
取消了垂直同步信号，固然可以换来更快的速度，但是在图像的连续性上势必打折扣。

11. 当我们设置了FPS后，再调整下Fixed timestep这个参数，
这个参数在ProjectSetting->Time中，目的是减少物理计算的次数，来提高游戏性能。

12.粒子特效：粒子数，粒子大小，粒子纹理去掉alpha通道

在屏幕外的物体，和active(false) 的物体unity不会去绘制(不会调drawcall)
Static Batching:
条件：1.相同材质（网格可以不一样） 2.不能移动 
unity尽可能多的网格结合到一个静态网格中，将其作为一个drawcall 提交，所以可能会 增加内存

Dynamic Batching
条件：1.网格少于900个顶点于（于mesh粒子来说是300个限制）
      2.不能镜像了（-1,1,1）
      3.同一材质，完全光照贴图的位置
      4.不使用Multi-pass着色器的情况（）	

GPU Instancing
 条件：1.相同网格,允许每个实例拥有各自的数据集，包括位置，旋转和颜色。
       2.勾选材质设置上的“Enable Instancing”复选框

13.代码优化
1.GetComponent<>(); 使用范型，不在update或循环中一直调用
2.不用gameObject.transform的形式访问组件，可以缓存gameObject上transform组件的引用再用
3.不要直接用类似gameObject.rigidbody，Rigidbody组件不存在时开销很大，用GetComponent做rigidbody缓存