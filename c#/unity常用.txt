//遍历子物体
foreach (Transform child in transform)  //不包括自己
{  
    Debug.Log(child.gameObject.name);  
}

foreach (Transform child in transform.GetComponentsInChildren<Transform>())  //包括自己
{   
    Debug.Log(child.gameObject.name);  
}

gameObject.GetComponent(System.Type.GetType("SUIFW.Test", true, true));

射线：
Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
RaycastHit hit;
bool isCollider = Physics.Raycast(ray, out hit, 1<<LayerMask.NameToLayer("Fish"));
if (isCollider)
{
    //hit.collider.transform  collider所在节点
    //hit.transform  collider 一直往上根节点
}

坐标转换：
1.3d相机同一相机不同z
pos = Camera.main.WorldToScreenPoint(pos);
pos = new Vector3(pos.x / Screen.width, pos.y / Screen.height, z);
pos = Camera.main.ViewportToWorldPoint(pos);

1.2d转3d
_endPos = InfoSrc.cam_ui.WorldToScreenPoint(InfoSrc.GoldLabPos);
_endPos.z = 0;
_endPos = new Vector3(_endPos.x / Screen.width, _endPos.y / Screen.height, transform.position.z);
_endPos = Camera.main.ViewportToWorldPoint(_endPos);

//ui图片跟鼠标走
Vector3 worldPos = _cam.ScreenToWorldPoint(Input.mousePosition); //uicam
Vector3 localPos = transform.parent.InverseTransformPoint(worldPos);
transform.localPosition = localPos;

线程：
void Start () {
    Thread t = new Thread(ThreadCall); //新线程
    t.Start(); //开始线程，调用 ThreadCall
}
void Update () {
    OnLoomUpdate();
}
private void ThreadCall()
{
    //调用 QueueOnMainThread，把新线程处理的东西 变相在主线程处理
    this.QueueOnMainThread(() =>
    {
        Debug.Log("ThreadCall");
        Transform bg = transform.FindChild("targetImg");
    });   
}

事件：
//Action:无返回值   Func:有返回值  predicate:返回bool型
public static event Action<string> _serverDataEvent; 
1.同个函数可以被多次添加多次调用，按添加顺序执行函数
2.为空时减去一个函数并不会报错，说明内部有做判断处理});

按钮：
//button.onClick.RemoveAllListeners(); //只能移除代码AddListener添加的事件，无法移除 ui 上预加的事件
button.onClick.AddListener(delegate ()
{
    Debug.Log(i+"代码添加按钮事件 并且自动触发按钮事件");
});
//可以调用事件系统 自动触发按钮事件
ExecuteEvents.Execute<IPointerClickHandler>(_btnAuto, new PointerEventData(EventSystem.current), ExecuteEvents.pointerClickHandler);

绕xz方向转
transform.RotateAround(b.transform.position,new Vector3 (1,0,1),60*Time.deltaTime);
transform.Rotation(Vector3.up*90) =  transform.localRotation.y=90;
//相对于摄像机，模型向右移动。
transform.Translate(Vector3.right * translation, Camera.main.transform);
/以模型X轴旋转，单位为2.
transform.Rotate(2, 0, 0);

mousePos = Input.mousePosition;          
while (Input.GetMouseButton(0))         
 {              
	 Vector3 offset = mousePos - Input.mousePosition;               
	 transform.Rotate(Vector3.up * offset.x, Space.World);                 
	 transform.Rotate(Vector3.right*offset.y,Space.World);               
	 mousePos=Input.mousePosition;             
	 yield return null;         
 } 

//触摸控制物体旋转和放大
using UnityEngine;
using System.Collections;
using System.IO;

public class ScaleAndRotate : MonoBehaviour
{
	private Touch oldTouch1;  //上次触摸点1(手指1)
	private Touch oldTouch2;  //上次触摸点2(手指2)

	void Start()
	{

	}
	
	void Update () {

		//没有触摸
		if ( Input.touchCount <= 0 ){
			return;
		}

		//单点触摸， 水平上下旋转
		if( 1 == Input.touchCount ){
			Touch touch = Input.GetTouch (0);
			Vector2 deltaPos = touch.deltaPosition;			
			transform.Rotate(Vector3.down  * deltaPos.x , Space.World); 
			transform.Rotate(Vector3.right * deltaPos.y , Space.World);
		}

		//多点触摸, 放大缩小
		Touch newTouch1 = Input.GetTouch (0);
		Touch newTouch2 = Input.GetTouch (1);
		
		//第2点刚开始接触屏幕, 只记录，不做处理
		if( newTouch2.phase == TouchPhase.Began ){
			oldTouch2 = newTouch2;
			oldTouch1 = newTouch1;
			return;
		}
		
		//计算老的两点距离和新的两点间距离，变大要放大模型，变小要缩放模型
		float oldDistance = Vector2.Distance(oldTouch1.position, oldTouch2.position);
		float newDistance = Vector2.Distance(newTouch1.position, newTouch2.position);

		//两个距离之差，为正表示放大手势， 为负表示缩小手势
		float offset = newDistance - oldDistance;

		//放大因子， 一个像素按 0.01倍来算(100可调整)
		float scaleFactor = offset / 100f;
		Vector3 localScale = transform.localScale;
		Vector3 scale = new Vector3(localScale.x + scaleFactor,
		                            localScale.y + scaleFactor, 
		                            localScale.z + scaleFactor);

		//最小缩放到 0.3 倍
		if (scale.x > 0.3f && scale.y > 0.3f && scale.z > 0.3f) {
			transform.localScale = scale;
		}

		//记住最新的触摸点，下次使用
		oldTouch1 = newTouch1;
		oldTouch2 = newTouch2;
	}

}

//粒子 缩放大小,速度，生命，层级
var systems = GetComponentsInChildren<ParticleSystem>();
foreach (ParticleSystem system in systems)
{
    ParticleSystem.EmissionModule emission = system.emission; //粒子某个模块属性
    ParticleSystem.MainModule mainModule = system.main;
    mainModule.startSizeMultiplier = multiplier;
    mainModule.startSpeedMultiplier = multiplier;
    mainModule.startLifetimeMultiplier = Mathf.Lerp(multiplier, 1, 0.5f);
    system.Clear();
    system.Play();
    

    //Renderer r = system.GetComponent<Renderer>();
    //r.sortingOrder = zorder;
    float d = system.startDelay;
    if (d > _delay)
    {
        system.startDelay = d - _delay;
     }
}
[ExecuteInEditMode] 编辑模式下执行，把物体拉到Hierarchy面板