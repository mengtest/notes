2017.12.6:
LuaJIT分为JIT模式和Interpreter模式
1.JIT模式：在iOS下是无法开启，比原生Lua 极限可以达几十倍
2.Interpreter模式：比原生Lua平均可以快3~8倍，编译成中间态的字节码（bytecode），然后每执行下一条字节码指令 (需LuaJIT支持的平台，可以手动关闭JIT，强制运行在Interpreter模式下)
(这个模式不需要运行时生成可执行机器码（字节码是不需要申请可执行内存空间的），所以任何平台任何时候都能用
Interpreter模式下执行可能将经常执行的代码JIT化（运行过程中决定的，安卓下可能JIT失败），优化成固定的内存访问
如果安卓下未关闭JIT，LuaJIT会重复尝试JIT(即编译出机器码放到特定的内存空间)，但是arm有一个限制，就是跳转指令只能跳转前后32MB的空间，这导致了一个巨大的问题：LuaJIT生成的代码要保证在一个连续的64MB空间内，如果这个空间被其他东西占用了，LuaJIT就会分配不出用于jit的内存，但LuaJIT会重复尝试导致性能处于瘫痪的状态(这时要关闭JIT)。
应对方案：
1.在android工程的Activity入口中就加载LuaJIT，做好内存分配，然后将这个luasate传递给Unity使用
2.寄存器分配失败->减少local变量、避免过深的调用层次
3.JIT遇到不支持的字节码->少用for in pairs，少用字符串连接
(关闭JIT:tolua首句修改 if jit then jit.off(); jit.flush() end)

luac:
Lua编译器,把用Lua语言编写的程序翻译为二进制文件
预编译单元（chunk）的主要优势在于:加载更快,预编译并非意味着执行更快速，因为Lua中的单元总会在执行前被编译为字节码

2017.12.12
Application.streamingAssetsPath 只能用AssetBundle.LoadFromFile 。如果想用File类操作。 比如File.ReadAllText  或者 File.Exists  Directory.Exists 这样都是不行的。

2017.12.14  LZMA，LZ4和不压缩(三种资源包的压缩方式)
LZMA：压缩方式优点是包体可以足够的小，缺点是在加载AB包的时候存在一个解压的操作
LZ4：包体会大一些（四分一），由于LZ4是按照块来读取的，不存在解压的操作，所以会更快点 （使用该方式打包：ChunkBasedCompression）
AssetBundle.LoadFromFile不能加载压缩过的AssetBundle(不压缩、LZ4),同步创建AssetBundle对象，这是最快的创建方式。创建完成后只会在内存中创建较小的SerializedFile，而后续的AssetBundle.Load需要通过IO从磁盘中获取(同LoadFromCacheOrDownload解压到外部硬盘)

当使用LZMA压缩时，为什么加载后还要进行LZ4 compression？其实AssetBundle的原则是这样的：
如果可以直接读取包中的资源(不压缩、LZ4)：
如果包在磁盘中，不用把包读取到unity内存，只读取资源信息索引就行了。
如果包在网络或mono内存中，那就把包读取到unity内存中。
如果不可以直接读取包中的资源(LZMA)：就要先解压，然后压缩成LZ4保存在内存中，供以后取用。

结论：打包使用DeterministicAssetBundle+UncompressedAssetBundle,对bundle进一步压缩http://blog.csdn.net/y1196645376/article/details/52492294），再使用AssetBundle.LoadFromFile加载bundle（推荐方式），如果用www加载要注意不要缓存www,要释放www,只保留assetbundle
或 使用ChunkBasedCompression 压缩选项（即使用LZ4，速度快，按照Chunk来读取，不想LZMA有那么多变数，唯一的缺点就是包体会大四分之一左右，亦可对bundle进一步压缩）

2017.12.15
python 使用git命令必需配置 git 环境
sys.path[0] .py文件所在路径

2017.12.18
lua 对于弱引用table，其实有三种形式：
1）key值弱引用，也就是刚刚说到的情况，只要其他地方没有对key值引用，那么，table自身的这个字段也会被删除。设置方法：setmetatable(t, {__mode = “k”});
2）value值弱引用，情况类似，只要其他地方没有对value值引用，那么，table的这个value所在的字段也会被删除。设置方法：setmetatable(t, {__mode = “v”});
3）key和value弱引用，规则一样，但是key和value都同时生效，任意一个起作用时都会导致table的字段被删除。设置方法：setmetatable(t, {__mode = “kv”});

2017.12.19
lua: module("filename", package.seeall)函数 5.2版本开始不推荐，原因：
1.package.seeall 这种方式破坏了模块的高内聚，原本引入 "filename" 模块只想调用它的 foobar() 函数，但是它却可以读写全局属性，例如 "filename.os"。
2.module 函数压栈操作引发的副作用，污染了全局环境变量。例如 module("filename") 会创建一个 filename 的 table，并将这个 table 注入全局环境变量中，这样使得没有引用它的文件也能调用 filename 模块的方法。

lua5.1版本使用 __gc ：table 被回收时会触发的回调，可以用来做一些 lua内存泄露 及 资源释放 等操作

2017.12.20
两个table同时弱引用一个对象，但这个对象被nil后collectgarbage，两个table都会销毁对该对象的引用，但是如果有一个table不是弱引用，那么另外一个也是会记录该对象

2017.12.26
正则表达式复习

2018.1.2
Capacity属性：可包含在当前实例所分配的内存中的最大字符数
StringBuilder 类Capacity属性的默认值为16，当StringBuilder 对象的Length属性值超过Capacity属性的长度时，StringBuilder 对象内部会重新构造一个字符数组
当StringBuilder 对象的Length属性超过Capacity的2倍时，不管有没有设置过Capacity属性的值，最终Capacity属性会和Length属性相同。
*重新扩充构造内部的字符数组，影响性能，所以在构造StringBuilder对象时，最好先预估下追加字符串的总长度，根据这个总长度，在StringBuilder构造函数中设置一下Capacity参数

2018.1.3
Canvas group 场景界面过渡效果
ScriptableObject:自定义资源（.asset）配置数据

#if UNITY_EDITOR
// 加载资源
Texture2D image = AssetDatabase.LoadAssetAtPath("Assets/Images/1.jpg", typeof(Texture2D)) as Texture2D; //不使用ab模式使用该方法加载资源,只能在editor模式下
Resources.UnloadAsset(image);  //只是标记该资源需要被GC回收，但不是立刻就被回收的

// 通知编辑器有资源被修改了
EditorUtility.SetDirty(mat);
// 保存所有修改 ,
AssetDatabase.SaveAssets();

// 以mat为模板创建mat2
Material mat2 = Object.Instantiate<Material>(mat);
// 创建资源
AssetDatabase.CreateAsset(mat2, "Assets/Materials/1.mat");
// 刷新编辑器，使刚创建的资源立刻被导入，才能接下来立刻使用上该资源
AssetDatabase.Refresh();
#endif

unity-spine 骨胳动画

2018.1.5
1.加载AssetBundle，先试着检查是否有缓存引用加1，这样就避免可能因为这时候有依赖身份但加载过程中因为没引用而被卸载掉
2.加载bundle，如果有依赖的先加载依赖，如果事异步的则先放进加载队列（但是还是有可能该bundle先于依赖加载完就有问题了？方案:记录所有依赖，开始加载前判断是否所有的依赖加载完）
3.依赖加载方式跟改bundle加载方式一样

2018.5.28
1.ConfigAsset asset = new ConfigAsset();  //继承ScriptableObject
  AssetDatabase.CreateAsset(asset, "Assets/cofig.asset");  //UnityEditor创建资产
  AssetDatabase.Refresh();
2.闪电链：
a.动态生成网格，new Mesh(),赋值顶点，uv，三角形，法线,材质球，每帧mat.SetTextureOffset("_MainTex", new Vector2(offset, 0)) uv流动
b.使用LineRenderer，lineRenderer.SetVertexCount(lineLength)准备好绘制线的点，设置点 _lineRender.SetPosition(i, _linePosList[i]);

2018.9.20
各种内存物件的卸载方式：
场景物件（GameObject）：这类物件可通过Destroy函数进行卸载；
资源（包括Prefab）：除了Prefab以外，资源文件可以通过三种方式来卸载：
1) 通过Resources.UnloadAsset卸载指定的资源，CPU开销小；
2)通过Resources.UnloadUnusedAssets一次性卸载所有未被引用的资源，CPU开销大；
3)通过AssetBundle.Unload(true)在卸载AssetBundle对象时，将加载出来的资源一起卸载。
而对于Prefab，目前仅能通过DestroyImmediate来卸载，且卸载后，必须重新加载AssetBundle才能重新加载该Prefab。由于内存开销较小，通常不建议进行针对性地卸载。
AssetBundle对象：AssetBundle.Unload(xxx)

2018.9.27
Physics.SphereCast 球形射线不能检测到起点半径之内的物体
RayCast  射线从Collider内部发出，那么这个Coiilder会被Ignore掉

2018.9.30
动画文件优化：只裁剪动画文件的压缩精度，没有引起Curve减少。BlobSize是不会有任何变化的，因为每个浮点数固定占32bit，而文件大小、AB大小、Editor下的内存都会变小；
裁剪动画文件的精度：裁剪精度所以动画的点更稀疏了，而连续相同的点更多，所以Dense Curve是减少了，Constant Curve是增多了，总的内存是减小了

2018.9.31
Shader.Find是只能查找到直接被build进APP的Shader有效，也就是放在Resource目录下的和Always Inlude里面包含的
Shader.parse: 主要是在加载shader (耗时可以使用always include或者使用AB包并常驻内存不去卸载来解决,游戏初始化的时候加载)
Shader.CreateGpuProgram: 去通知Gpu有新的Shader加载进来,需要GPU对这个Shader针对目标平台进行编译,不然GPU也不知道要如何渲染目标物体
（所有的Shader都加载出来，然后做一次Shader.Find的操作，Shader.Find就相当于通知GLProgram链接Shader的一个过程）

2018.10.9（apk更新）
persistentDataPath目录下版本.txt 文件用WWW不能加载(Connection refused),用File读取
1.前提：在Unity重新安装APK后，Application.persistentDataPath是共享的（所以如果有大版本更新，要先清空该目录，要不该目录下的资源会因为更新优先级比较高导致重装后还会去读该目录下的资源而出错）
并且这两地方只有安装完程序后才生成。所以我们可以放心覆盖原来的APK
2.使用WWW 下载服务器上的apk包，用FileInfo写bytes到 新文件 (persistentDataPath+ apkName)
3.制作jar安装apk
a.新建工程后 新建 Module（ 选择 Android Library,Package name 与unity工程一致），添加java类继承UnityPlayerActivity
public void InstallApk(String apkPath) {
        System.out.println("Android下载地址："+apkPath);
        File file = new File(apkPath);
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        if(Build.VERSION.SDK_INT>=24) { //Android 7.0及以上
            System.out.println("Android 7.0及以上");
            // 参数2 清单文件中provider节点里面的authorities ; 参数3  共享的文件,即apk包的file类
            Uri apkUri = FileProvider.getUriForFile(this, "com.sen.installlibrary.fileprovider", file);//记住修改包名
            //对目标应用临时授权该Uri所代表的文件
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            intent.setDataAndType(apkUri, "application/vnd.android.package-archive");
        }else{
            System.out.println("Android 7.0及以下");
            intent.setDataAndType(Uri.fromFile(file), "application/vnd.android.package-archive");
        }

        this.startActivity(intent);
    }

b.对应的Unity安装中的 classes.jar 导入到这个 Module 的 libs 中并加入依赖（..\AndroidPlayer\Variations\mono\Release\Classes\classes.jar）
c.修改 build.gradle, Library 展开项的 other 的展开项中找到 exportJar生成jar包（release目录下）
d.导入生成的jar到unity（去掉jar包里的BuildConfig）, android-support-v4.jar

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.sen.installlibrary">  //包名，要与unity工程的一致，否则打出的包不能启动

    <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:supportsRtl="true">
        <activity android:name=".MyActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
            <meta-data android:name="unityplayer.UnityActivity" android:value="true"/>  //没有的话在 Unity 导出 APK 时会报找不到manifest 文件的错误信息
        </activity>

        <provider  //共享资源用来安装apk,用到的资源 放unity Android/res/
            android:name="android.support.v4.content.FileProvider"
            android:authorities="com.sen.installlibrary.fileprovider"
            android:grantUriPermissions="true"
            android:exported="false">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/file_paths" />
        </provider>
    </application>
</manifest>

2018.10.12
implicit ：声明隐式的用户定义类型转换运算符。它可以实现2个不同类的隐式转换 ，提高代码的可读性
 public class Payment
{
     public decimal Amount { get; set; }
}
public class PaymentDTO
{
    public string AmountString { get; set; }

    public static implicit operator PaymentDTO(Payment payment)   //explicit 
    {
        return new PaymentDTO
        {
            AmountString = payment.Amount.ToString("C2")
        };
    }
}

使用：PaymentDTO dto = new Payment { Amount = 1 };   //隐式转换不报错

explicit 
使用：PaymentDTO dto = (PaymentDTO)new Payment { Amount = 1 };  //需显示转换

2018.10.16
streamingAssets这个目录(只读的)在打包成APK的时候是不存在的，里面的文件会放在assets的目录下
RuntimePlatform.Android："jar:file://" + Application.dataPath + "!/assets/" = Application.streamingAssetsPath = ＝ jar:file:///data/app/com.xxx.xxx-1.apk!/assets (只能用www加载)
**Application.dataPath+”!assets” 比上面少了一个   jar:file:// ，所以用这个时可以用AssetBundle.LoadFromFile加载资源
RuntimePlatform.IPhonePlayer: Application.dataPath + "/Raw/";
**APK是一个安卓的压缩包，用WWW来读取的时候文件的地址必须是file://的形式，因为WWW进行的是远程读取，类似网页
persitent路径无论在什么平台下都是本地路径，所以可以直接通过Directory或者File等文件操作的类来进行文件的读取

2018.10.18
1.FBX上的Read/Write Enabled关闭后，内存中便不再保存其Mesh的副本（只存在显存中），供粒子系统使用的Mesh是需要开启Read/Write Enabled的
2.资源冗余得越多，切换场景时，UnloadUnusedAssets的开销越大，进而增加了场景的切换时间

2018.11.1
1.StreamingAssets里不能有中文资源
2.更新下载 bundl名称不能有空格
3.GetDependencies() 获取依赖可能返回自己，就像材质球文件获取依赖只返回自己而得不到shader依赖文件，但是如果预设依赖于该材质球，该预设会获取到材质球和shader文件依赖
4.shader 有可能依赖默认图片
5.引擎不识别lua和bin文件，所以打bundle要加.txt后缀，LoadAsset时也要加后缀
6.BuildAssetBundleOptions.None 是使用LZMA压缩比比较高，内存：LZ4压缩的包的大小。性能：从磁盘读取+ LZMA压缩+ LZ4压缩。
BuildAssetBundleOptions.ChunkBasedCompression 是使用LZ4压缩比比较低，内存：没有额外的开销。性能：从磁盘读取
7.打完bundle后重启unity再打一次，会出现有些budle改变了（原资源未变）
使用增量打包，保留上次打的bundle目录保留清单文件，manifest只在增量式打包时才用到
（Unity5.X以后，BuildAssetBundleOptions.DeterministicAssetBundle是默认选项，不需要特意在去加，GraphicsSettings
Shader stripping默认是自动的，改成使用manual）

2019.2.25
BuildSetting 中 “Optimize Mesh Data”：
开启选项，将会在 Build AssetBundle 过程中根据场景中 Mesh 所使用的材质（或者说 shader）进行静态分析，来去掉 Mesh 中“无用”的数据（材质不使用的数据），
比如：切线，发现，定点色，多余的 uv 等，以此减少数据量和最终构建的游戏包的大小，所以如果有动态切换材质这时候就会出现很怪异的现象

Activator.CreateInstance ：使用与指定参数匹配程度最高的构造函数来创建指定类型的实例。
void CreateInstance(Type tp)
{
    MsgData msgdata = Activator.CreateInstance(tp) as MsgData;
    //todo
}

2019.3.4
apk+obb
GetAPKPath: /storage/emulated/0/Android/obb/com.qld.lmxt/main.1.com.qld.lmxt.obb!assets/UI_Bundles/ui/prefabs/versionupdate.unity3d (obb)
GetAPKPath: /data/app/com.qld.lmxt-vIxgzQg8gHYR2QPSke0p1Q==/base.apk!assets/UI_Bundles/ui/prefabs/versionupdate.unity3d (包内)

obb:
Application.streamingAssetsPath: jar:file:///storage/emulated/0/Android/obb/com.qld.lmxt/main.1.com.qld.lmxt.obb!/assets
Application.dataPath: /storage/emulated/0/Android/obb/com.qld.lmxt/main.1.com.qld.lmxt.obb

正常包：
Application.streamingAssetsPath: jar:file:///data/app/com.qld.lmxt-lrNOqcVegh94CgFt9O-PZQ==/base.apk!/assets
Application.dataPath: /data/app/com.qld.lmxt-lrNOqcVegh94CgFt9O-PZQ==/base.apk

1.Publishing Settings的Split Application Binary打钩  //PlayerSettings.Android.useAPKExpansionFiles = true;
2.APK文件主要包括Java、Native代码、游戏脚本、插件以及第一个场景包含的所有资源
3.Obb包把所有的资源文件（包括 streaming Assets）打包到assets目录下（Android/obb/<package-name>/  目录中）
4.Obb扩展文件在Google Play开发者控制台中上传，可以被多个APK版本所复用，也就是说可以只更新APK，不更新APK扩展文件
5.Google Play更新APK文件时要求每次的版本号都要比上次的大
6.用户从Google Play上下载应用时，Google Play会自动将APK文件和扩展文件同时下载下来， 应用启动时就可以直接使用扩展文件了。但是Google Play并不总是保证一定会下载扩展文件

2019.3.8
位运算中的异或运算（满足交换律）：
1 ^ 1 = 0
0 ^ 1 = 1
x ^ 1 可实现翻转
如不使用临时变量，实现两个值的交换：
a = a^b
b = b^a  变成原来a值
a = a^b  变成原来b值

1 ^ 0 = 1
0 ^ 0 = 0
x ^ 0 可实现保持
由 B ^ A ^ A = B 可实现加密解密

2019.3.22
1.unity 打爆64k问题，sdk是 aar时会报类找不到
2.unity编译时使用gradle而不是普通的internal时，uinty先会去找你项目Plugins/Android/mainTemplate.gradle,
 如果有,它则会follow你的gradle文件,然后放弃它安装目录下的mainTmplate.gradle

2019.5.8
Android6.0（API23）开始，一些敏感权限在清单文件中已经申请的还要用户授权
权限分为两类，一类是NormalPermissions，这类权限一般不涉及用户隐私，是不需要用户进行授权的，比如手机震动、访问网络等；
另一类是Dangerous Permission，一般是涉及到用户隐私的，需要用户进行授权，比如读取sdcard、访问通讯录等
安卓drawable目录资源命名需小写
重启应用：
final Intent intent = getPackageManager().getLaunchIntentForPackage(getPackageName());
intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
startActivity(intent);
android.os.Process.killProcess(android.os.Process.myPid());